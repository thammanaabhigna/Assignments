==================================Anonymous_assignment=============================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Anonymous_assignment
{
    //Defining delegate
    public delegate double AddnumsDelegate(int x, float y);
    public delegate int MultiplyDelegate(int x, int y);
    public delegate string NamesDelegate(string str);
    public delegate string WishDelegate(string str);
    public delegate bool CheckLengthDelegate(string str);
    public delegate bool CheckLength1Delegate(string str);

    class Program
    {
        static void Main(string[] args)
        {
            AddnumsDelegate obj1 = delegate (int x, float y) //object creation
            {
                return (x + y);
            };
            double result = obj1.Invoke(5, 5.5f); //Invoke Method
            Console.WriteLine(result);

            MultiplyDelegate obj2 = delegate (int x, int y) //object creation
            {
                return (x + y);
            };
            int result1 = obj2.Invoke(50, 50); //Invoke Method
            Console.WriteLine(result1);

            NamesDelegate obj3 = delegate (string Abhigna) //object creation
            {
                return " Hai " + Abhigna + " Hello ";
            };
            string result2 = obj3.Invoke("Ramya"); //Invoke Method
            Console.WriteLine(result2);

            WishDelegate obj4 = delegate (String sir)//object creation
            {
                return (" Good Morning " + sir + " day ");
            };
            string result3 = obj4.Invoke("have a nice "); //Invoke Method
            Console.WriteLine(result3);

            CheckLengthDelegate obj5 = delegate (string name) //object creation
            {
                if (name.Length > 5)
                    return true;
                return false;
            };
            bool check = obj5.Invoke(" Ramyasree "); //Invoke Method
            Console.WriteLine(check);

            CheckLength1Delegate obj6 = delegate (string namee)//object creation
            {
                if (namee.Length < 3)
                    return true;
                return false;
            };
            bool check1 = obj6.Invoke(" AbhignaThammana ");//Invoke Method
            Console.WriteLine(check1);

            Console.ReadLine();
        }
    }
}

==================================================Delegate_assign========================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Delegate_Assignment
{
    //Defining delegate

    public delegate double AddnumsDelegate(int x, float y);
    public delegate int MultiplyDelegate(int x, int y);
    public delegate void NamesDelegate(string str);
    public delegate void WishDelegate(string str);
    public delegate bool CheckLengthDelegate(string str);
    public delegate bool CheckLength1Delegate(string str);

    class Program
    {
        //Instantiate the delegate

        //return value Method
        public static double Addnums(int x, float y)
        {
            return (x + y);
        }
        //return value method
        public static int Multiply(int x, int y)
        {
            return (x * y);
        }

        //non-return value Method
        public static void Names(string Abhigna)
        {
            Console.WriteLine(" Hello " + Abhigna + " Hai ");
        }
        //non-return value Method
        public static void Wish(string sir)
        {
            Console.WriteLine(" Good Morning " + sir + " day ");
        }

        public static bool CheckLength(string name1)
        {
            if (name1.Length > 5)
                return true;
            return false;
        }
        public static bool CheckLength1(string namee)
        {
            if (namee.Length < 3)
                return true;
            return false;
        }

        static void Main(string[] args)
        {
            //Creating object
            //invoke the values
            AddnumsDelegate obj = new AddnumsDelegate(Addnums);
            double result = obj.Invoke(50, 50);
            Console.WriteLine(result);

            MultiplyDelegate obj1 = new MultiplyDelegate(Multiply);
            int result1 = obj1.Invoke(50, 50);
            Console.WriteLine(result1);

            NamesDelegate n = new NamesDelegate(Names);
            n.Invoke(" Abhigna ");

            WishDelegate w = new WishDelegate(Wish);
            w.Invoke(" have a good  ");

            CheckLengthDelegate c = new CheckLengthDelegate(CheckLength);
            bool check = c.Invoke(" Abhigna ");
            Console.WriteLine(check);

            CheckLength1Delegate c1 = new CheckLength1Delegate(CheckLength);
            bool check1 = c.Invoke(" Thammana ");
            Console.WriteLine(check1);

            Console.ReadLine();
        }
    }
}


==========================================================LambdaAssignment==================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LambdaAssignment


{
    //Defining the delegate according to method
    public delegate double AddnumsDelegate(int x, float y);
    public delegate int MultiplyDelegate(int x, int y);
    public delegate void NamesDelegate(string str);
    public delegate void WishDelegate(string str);
    public delegate bool CheckLengthDelegate(string str);
    public delegate bool CheckLength1Delegate(string str);

    class Program
    {
        static void Main(string[] args)
        {
            AddnumsDelegate obj1 = (int x, float y) =>
            {
                return (x + y);
            };
            double result = obj1.Invoke(5, 5.5f);
            Console.WriteLine(result);

            MultiplyDelegate obj2 = (int x, int y) =>
            {
                return (x + y);
            };
            int result1 = obj2.Invoke(50, 50);
            Console.WriteLine(result1);

            NamesDelegate obj3 = Abhigna =>
            {
                Console.WriteLine(" Hai " + Abhigna + " Hello ");
            };
            obj3.Invoke("Abhigna");

            WishDelegate obj4 = sir =>
            {
                Console.WriteLine(" Good Morning " + sir + " day ");
            };
            obj4.Invoke("have a Good ");

            CheckLengthDelegate obj5 = name =>
            {
                if (name.Length > 5)
                    return true;
                return false;
            };
            bool check = obj5.Invoke(" Sowmya ");
            Console.WriteLine(check);

            CheckLength1Delegate obj6 = namee =>
            {
                if (namee.Length < 3)
                    return true;
                return false;
            };
            bool check1 = obj6.Invoke(" Ramyasree ");
            Console.WriteLine(check1);

            Console.ReadLine();
        }
    }
}

====================================================predefinedGenericDelegate====================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PredefinedGenericDelegate
{
    //Defining the delegate according to method
    public delegate double AddnumsDelegate(int x, float y);
    public delegate int MultiplyDelegate(int x, int y);
    public delegate void NamesDelegate(string str);
    public delegate void WishDelegate(string str);
    public delegate bool CheckLengthDelegate(string str);
    public delegate bool CheckLength1Delegate(string str);

    class Program
    {

        //method with returning value

        //method without returning value

        //method with returning value

        static void Main(string[] args)
        {

            //Instiating the delegate
            Func<int, float, double> obj1 = (x, y) =>
            {
                return (x + y);
            };

            double result = obj1(10, 3.142f); //new variable to store the values-return type
            Console.WriteLine(result);

            Func<int, int, double> obj2 = (x, y) =>
            {
                return (x * y);
            };

            double result2 = obj2(10, 30); //new variable to store the values-return type
            Console.WriteLine(result2);

            Action<string> obj3 = s =>//non return type
            {
                Console.WriteLine(s + "Thammana");
            };
            obj3("Abhigna");

            Action<string> obj4 = st =>//non return type
            {
                Console.WriteLine(st + "Training");
            };
            obj4("DXC");

            Predicate<string> obj5 = name => //new variable to store the values-return type
            {
                //check the string whose length is greater than 4 should print true else false;
                if (name.Length > 4)
                    return true;
                return false;
            };
            bool check = obj5("Abhigna");
            Console.WriteLine(check);

            Predicate<string> obj6 = name => //new variable to store the values-return type
            {
                //check the string whose length is greater than 4 should print true else false;
                if (name.Length > 4)
                    return true;
                return false;
            };
            bool check1 = obj6("Ramyasree");
            Console.WriteLine(check1);

            Console.ReadLine();
        }
    }
}

